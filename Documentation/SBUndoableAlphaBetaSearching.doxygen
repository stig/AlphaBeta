/** @protocol SBUndoableAlphaBetaSearching

AlphaBeta normally calls -copy on your states a lot during search. If
calling -copy is particularly expensive your states may optionally
implement this protocol. It contains only one method. SBAlphaBeta will
then make fewer copies of your states during search.

If you go down this route it is possible that you have to make changes
to the -legalMoves and -applyMove: methods. The moves returned by
-legalMoves must contain enough information to perform an undo
operation, not just to create them in the first place. This can mean
creating them might become more expensive. On the other hand, having
more information in the moves might help make -applyMove: faster.

Consider Reversi as an example. If you use undoable states your moves
must contain a list of all the slots that were flipped, in addition to
the slot where you put your piece. It is impossible to deduce this
information from just a set of co-ordinates.

A word of warning: you have to do some profiling to find out what
works best for your specific case. In my implementation of Reversi
there is little discernable difference in performance of the two.

@section sec_undo undoMove:(id)m;

The move passed to it will always be the last move that was applied to
the receiver with -applyMove:. The effect of this method should be to
produce the previous state.

*/
